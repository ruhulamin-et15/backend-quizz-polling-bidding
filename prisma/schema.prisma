datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  phone            String              @unique
  email            String              @unique
  fullName         String
  password         String
  studentId        Int                 @default(0)
  classDepartment  String?
  educationLevel   String?
  institution      String?
  hobbies          String?
  avatar           String              @default("http://localhost:5000/avatar.jpg")
  presentAddress   String?
  permanentAddress String?
  role             UserRole            @default(USER)
  userStatus       UserStatus          @default(ACTIVE)
  isVerified       Boolean             @default(false)
  otp              String?
  otpExpiresAt     DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  quizzes          Quiz[]
  participations   QuizParticipation[]
  questions        Questions[]
  polls            Polls[]
  votes            Votes[]
  bidding          Bidding[]
  artwork          Artwork[]

  @@map("users")
}

model Artwork {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  imageUrl    String
  artistId    String    @db.ObjectId
  artist      User?     @relation(fields: [artistId], references: [id])
  biddings    Bidding[]

  @@map("artworks")
}

model Bidding {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  artworkId String  @db.ObjectId
  artwork   Artwork @relation(fields: [artworkId], references: [id])
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])

  @@map("biddings")
}

model Polls {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  adminId   String   @db.ObjectId
  question  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     User     @relation(fields: [adminId], references: [id])
  options   Option[]

  @@map("polls")
}

model Option {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  pollId    String   @db.ObjectId
  option    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  poll      Polls?   @relation(fields: [pollId], references: [id])
  votes     Votes[]

  @@map("options")
}

model Votes {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  optionId  String   @unique @db.ObjectId
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  otion     Option   @relation(fields: [optionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("votes")
}

model Quiz {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  teacherId      String              @db.ObjectId
  title          String
  description    String
  duration       Int
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  teacher        User                @relation(fields: [teacherId], references: [id])
  questions      Questions[]
  participations QuizParticipation[]

  @@map("quizzes")
}

model Questions {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId        String   @db.ObjectId
  teacherId     String   @db.ObjectId
  question      String
  options       String[]
  correctAnswer String
  marks         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  quiz          Quiz     @relation(fields: [quizId], references: [id])
  teacher       User     @relation(fields: [teacherId], references: [id])

  @@map("questions")
}

model QuizParticipation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  quizId      String   @db.ObjectId
  score       Int
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  quiz        Quiz     @relation(fields: [quizId], references: [id])

  @@map("quiz_participations")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum UserRole {
  ADMIN
  USER
  TEACHER
  ARTIST
}
